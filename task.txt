조립 과정 세분화
1. 초기화 과정
    - 현재 설명서 단계 정보를 입력 받아 이 단계에서 조립해야할 부품(instance 단위) 구체화
        전달 받는 배치 정보를 적극 활용하여 규칙 만들어보기(#TODO: 이번 주 목표)
        전달 받는 정보 중 connector 정보는 개수가 없을 수도 있음(#TODO:)
    - 이전 조립 단계 마지막 status들을 불러 이번 단계 조립의 시작 상태로 지정
        기본적으로 각 단계별 마지막 status는 하나여야 한다(제일 점수가 높은 걸로)
        => 현재는 여러개일 경우도 고려하여 리스트로 불러옴
    - 이전 조립 단계 마지막 sequence 불러오기.

2. 조립 과정
    - 조립 단계에서 추출한 현재 단계에서 조립해야할 물체를 조립 순서에 맞게 정렬
        #TODO: 조립 순서를 어떻게 정해야 할 지 방법론 생각
        a. 빈공간 + 빈공간은 조립이 불가능하다라는 규칙을 도입할 경우.
        b. 배치 정보를 활용하는 방법

        => [part1, part2, part3, part4...]

    - 현재 순서에 조립해야할 파트 두개를 가능한 결합 쌍에 따라 서로 조립해보고 제일 안정적인 결합 쌍을 출력.
        - 조립 규칙
            1. 같은 파트(브라켓 + 브라켓)은 조립하지 않는다.
        - 이때 결합 쌍은 [] 일 수 있음.
            == 출력된 결합 쌍이 없다.
            => 같은 다큐먼트에 존재하여 둘 중 큰 부품을 부모로 정함
                - 조립이 이뤄지지 않은 경우 status 업데이트 안함.
                - 대신 조립 순서를 변경하여 조립되지 않은 물체를 맨 뒤로.

    - 조립 결과물을 저장
        - status 업데이트
            - 추출된 결합 쌍으로 부터 사용된 assembly point들 저장
            - 결합에 사용된 두 부모 부품 중 작은 부품에 속한 모든 부품을 부모 안으로
        - status 파일로 저장
        - 부모로 지정된 파트를 다음 조립 대상으로 삼음.
        
    - 조립 완료된 parent파트와 다음 파트 조립
    - 반복
3. 파트 간 조립 과정
    - 조립 시작 전 초기화
        - 입력 받은 두 파트 다큐먼트 내의 모든 정보를 불러옴.
    - 조립을 진행할 다큐먼트를 특정 이름으로 저장
        - 출력될 결합 쌍의 초기 상태
        - 최종 상태가 될 수도 있음
    - 모든 가능한 결합쌍에 대해 조립 수행(구속)
    - 제일 안정적인 결합 쌍 조합을 찾기(#TODO:)
        - 제일 안정적인 상태를 최종 상태로 출력
    
4. 결합 쌍간의 조립 과정
    - 결합 쌍 정보로 부터 다큐먼트 내 오브젝트와 엣지 정보 출력
        - 결합 쌍 정보 ((part_a_name, "hole_id"), (part_b_name, "hole_id))
        - 조립에 사용될 정보: parent_obj, child_obj, parent_edge, child_edge
    - 엣지간 구속 및 구속 조건 풀기
        - 해가 존재하는 구속 조건에 대해 저장(#TODO:)
        
*status에 저장된 정보
- 각 파트들의 조립 상태
- 사용가능한 assemble point
- 이 파트를 나타내는 다큐먼트

# commit
- assembly_process -> assembly_maner



#TODO:
- 배치를 정보를 활용한 조립.
- 